/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DemoUI.java
 *
 * Created on Aug 27, 2011, 12:26:31 AM
 */
package org.esbhive.demoSample;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import org.esbhive.node.mgt.xsd.ESBNode;

/**
 *
 * @author melaka
 */
public class DemoUI extends javax.swing.JFrame implements UIInterface {

    /** Creates new form DemoUI */
    public DemoUI() {

        initComponents();
        buttonList.add(esb1);
        buttonList.add(esb2);
        buttonList.add(esb3);
        buttonList.add(this.esb4);
        buttonList.add(this.esb5);
//        buttonList.add(this.esb6);
        Iterator<JButton> iterator = this.buttonList.iterator();
        while (iterator.hasNext()) {

            iterator.next().setVisible(false);
        }
        arrowLableList.add(arrow1);
        arrowLableList.add(arrow2);
        arrowLableList.add(arrow3);
        arrowLableList.add(arrow4);
        arrowLableList.add(arrow5);

        Iterator<JLabel> iterator2 = this.arrowLableList.iterator();

        while (iterator2.hasNext()) {

            iterator2.next().setVisible(false);
        }

        this.serverLableList.add(machine1);
        this.serverLableList.add(machine2);
        this.serverLableList.add(machine3);
        this.serverLableList.add(machine4);
        this.serverLableList.add(machine5);
        Iterator<JLabel> iterator3 = this.serverLableList.iterator();

        while (iterator3.hasNext()) {

            iterator3.next().setVisible(false);
        }

        this.jButton1.setVisible(false);
        this.jLabel4.setVisible(false);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setVisible(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        responseArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        nodesArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        esb1 = new javax.swing.JButton();
        esb2 = new javax.swing.JButton();
        esb3 = new javax.swing.JButton();
        esb4 = new javax.swing.JButton();
        esb5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        arrow4 = new javax.swing.JLabel();
        arrow3 = new javax.swing.JLabel();
        arrow2 = new javax.swing.JLabel();
        arrow1 = new javax.swing.JLabel();
        machine5 = new javax.swing.JLabel();
        machine2 = new javax.swing.JLabel();
        machine1 = new javax.swing.JLabel();
        machine3 = new javax.swing.JLabel();
        machine4 = new javax.swing.JLabel();
        arrow5 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        responseArea.setColumns(20);
        responseArea.setRows(5);
        jScrollPane1.setViewportView(responseArea);

        jLabel1.setText("Responses");

        nodesArea.setColumns(20);
        nodesArea.setRows(5);
        jScrollPane2.setViewportView(nodesArea);

        jLabel2.setText("Node List");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ESBhive logo icon.png"))); // NOI18N
        jLabel3.setText("jLabel3");

        esb1.setMaximumSize(new java.awt.Dimension(12, 8));
        esb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esb1ActionPerformed(evt);
            }
        });
        esb1.setBounds(30, 450, 170, 30);
        jLayeredPane1.add(esb1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        esb2.setBounds(30, 160, 170, 30);
        jLayeredPane1.add(esb2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        esb3.setBounds(480, 160, 170, 30);
        jLayeredPane1.add(esb3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        esb4.setBounds(480, 440, 170, 30);
        jLayeredPane1.add(esb4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        esb5.setBounds(250, 500, 170, 30);
        jLayeredPane1.add(esb5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton2.setText("Client");
        jButton2.setBounds(290, 170, 100, 80);
        jLayeredPane1.add(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        arrow4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SE.png"))); // NOI18N
        arrow4.setText("jLabel5");
        arrow4.setBounds(390, 220, 90, 110);
        jLayeredPane1.add(arrow4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        arrow3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NE.png"))); // NOI18N
        arrow3.setText("jLabel5");
        arrow3.setBounds(390, 100, 90, 105);
        jLayeredPane1.add(arrow3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        arrow2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NW.png"))); // NOI18N
        arrow2.setText("jLabel5");
        arrow2.setBounds(200, 100, 90, 100);
        jLayeredPane1.add(arrow2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        arrow1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SW.png"))); // NOI18N
        arrow1.setText("jLabel5");
        arrow1.setBounds(210, 230, 90, 100);
        jLayeredPane1.add(arrow1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        machine5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/black mac.png"))); // NOI18N
        machine5.setBounds(290, 380, 110, 110);
        jLayeredPane1.add(machine5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        machine2.setBounds(100, 20, 100, 120);
        jLayeredPane1.add(machine2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        machine1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlineEsb.png"))); // NOI18N
        machine1.setBounds(100, 320, 100, 110);
        jLayeredPane1.add(machine1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        machine3.setIcon(new javax.swing.ImageIcon("/home/melaka/ESBhive/demoSample/src/main/resources/Esb.png")); // NOI18N
        machine3.setBounds(480, 20, 100, 120);
        jLayeredPane1.add(machine3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        machine4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/offlineEsb.png"))); // NOI18N
        machine4.setBounds(480, 320, 100, 110);
        jLayeredPane1.add(machine4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        arrow5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/S.png"))); // NOI18N
        arrow5.setText("jLabel5");
        arrow5.setBounds(330, 250, 30, 130);
        jLayeredPane1.add(arrow5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Esb.png"))); // NOI18N
        jLabel5.setText("jLabel5");
        jLabel5.setBounds(480, 480, 30, 40);
        jLayeredPane1.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unavailableESB.png"))); // NOI18N
        jLabel6.setText("jLabel6");
        jLabel6.setBounds(540, 490, 20, 30);
        jLayeredPane1.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setText("Leader Node");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(521, 521, 521)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)))
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void esb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esb1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_esb1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DemoUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel arrow1;
    private javax.swing.JLabel arrow2;
    private javax.swing.JLabel arrow3;
    private javax.swing.JLabel arrow4;
    private javax.swing.JLabel arrow5;
    private javax.swing.JButton esb1;
    private javax.swing.JButton esb2;
    private javax.swing.JButton esb3;
    private javax.swing.JButton esb4;
    private javax.swing.JButton esb5;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel machine1;
    private javax.swing.JLabel machine2;
    private javax.swing.JLabel machine3;
    private javax.swing.JLabel machine4;
    private javax.swing.JLabel machine5;
    private javax.swing.JTextArea nodesArea;
    private javax.swing.JTextArea responseArea;
    // End of variables declaration//GEN-END:variables
    private CopyOnWriteArrayList<JButton> buttonList = new CopyOnWriteArrayList<JButton>();
    private ArrayList<JLabel> arrowLableList = new ArrayList<JLabel>();
    private ArrayList<JLabel> serverLableList = new ArrayList<JLabel>();

    public void nodesFetched(List<ESBNode> esbNodes) {

        Iterator<JButton> iterator = null;
        JButton next;
        String nodes = "";
        JButton[] buttonArry = new JButton[0];
        buttonArry = buttonList.toArray(buttonArry);
        int j = 0;



        boolean available = false;
        for (ESBNode node : esbNodes) {
            nodes += node.getIpAndPort() + "\n";
            iterator = buttonList.iterator();
            available = false;
            while (iterator.hasNext() && !available) {
                next = iterator.next();
                if (node.getIpAndPort().equals(next.getText())) {
                    available = true;
                    next.setBackground(null);
                    int findIndex = this.findIndex(node.getIpAndPort());
                    JLabel get = this.serverLableList.get(findIndex);
                    get.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Esb.png")));

                }
                if ("".equals(next.getText())) {
                    next.setText(node.getIpAndPort());
                    next.setVisible(true);
                    next.setBackground(null);

                    int findIndex = this.findIndex(node.getIpAndPort());
                    JLabel get = this.serverLableList.get(findIndex);
                    get.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Esb.png")));
                    get.setVisible(true);
                    available = true;
                }

            }

        }



        iterator = buttonList.iterator();
        JButton next1 = null;
        boolean isAlive = false;
        while (iterator.hasNext()) {
            next1 = iterator.next();
            for (ESBNode node : esbNodes) {
                if (next1.getText().equals(node.getIpAndPort())) {
                    isAlive = true;
                    break;
                } else {
                    isAlive = false;
                }
            }
            if (!isAlive) {
                next1.setBackground(Color.red);
                int findIndex = this.findIndex(next1.getText());
                JLabel get = this.serverLableList.get(findIndex);
                get.setIcon(new javax.swing.ImageIcon(getClass().getResource("/offlineEsb.png")));

            }
        }


        this.nodesArea.setText(nodes);

    }

    public void requestFailed(ESBNode esbNode) {
        this.responseArea.setText("Failed the request to " + esbNode.getIpAndPort());
        int findIndex = this.findIndex(esbNode.getIpAndPort());
        JLabel get = this.serverLableList.get(findIndex);
        get.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unavailableESB.png")));

    }

    public synchronized void nodeRemoved(List<ESBNode> oldEsbNodes, List<ESBNode> newEsbNodes) {

        List<ESBNode> removed = oldEsbNodes;
        ESBNode next = null;
        JButton next1 = null;
        String old = "";
        String newNodes = "";
        for (ESBNode node1 : oldEsbNodes) {
            old += node1.getHttpsPort() + "\n";
        }

        for (ESBNode node2 : newEsbNodes) {
            newNodes += node2.getIpAndPort() + "\n";
        }
        this.responseArea.setText("Old node list: " + old + "\n" + "New node list: " + newNodes);
        removed.removeAll(newEsbNodes);
        Iterator<ESBNode> iterator = removed.iterator();
        Iterator<JButton> iterator1 = this.buttonList.iterator();
        JButton[] buttonArry = new JButton[0];
        buttonArry = buttonList.toArray(buttonArry);
        int i = 0;

        while (iterator.hasNext()) {
            next = iterator.next();

            while (iterator1.hasNext()) {

                next1 = iterator1.next();
                if (next.getIpAndPort().equals(next1.getText())) {
                    next1.setBackground(Color.red);
                    // next1.setText("FAILED");

                    // next1.setVisible(false);
                    int findIndex = this.findIndex(next1.getText());
                    JLabel get = this.serverLableList.get(findIndex);
                    get.setIcon(new javax.swing.ImageIcon(getClass().getResource("/offlineEsb.png")));
                }
                i++;
            }
            i = 0;
        }

    }

    public void responseRecieved(ESBNode node, String value) {
        //  String ipAndPort = node.getIpAndPort();
        //buttonList.indexOf(node);

        ///////////////////
        String ip = node.getIpAndPort();
        JButton next = null;
        Iterator<JButton> iterator = this.buttonList.iterator();
        while (iterator.hasNext()) {

            next = iterator.next();
            if (next.getBackground() != Color.red) {
                next.setBackground(null);
                next.setIcon(null);
                int findIndex = this.findIndex(next.getText());
                JLabel get = this.serverLableList.get(findIndex);
                get.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Esb.png")));
                if (ip.equals(next.getText())) {
                    //next.setBackground(Color.GREEN);
                   // next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ESBhive logo icon.png"))); // NOI18N
                    int findIndex1 = this.findIndex(next.getText());
                    JLabel get1 = this.serverLableList.get(findIndex1);
                    get1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlineEsb.png")));
                }
            }

        }
        this.responseArea.setText("Response from " + node.getIpAndPort() + " is" + value);

    }

    public List<String> ipPortPairs(List<ESBNode> esbNodes) {
        List ipPortPairs = new ArrayList();
        for (Iterator<ESBNode> i = esbNodes.iterator(); i.hasNext();) {
            ipPortPairs.add(i.next().getIpAndPort());
        }
        return ipPortPairs;
    }

    public void currentLeader(String ipAndPort) {
        this.jButton1.setText(ipAndPort);
        this.jButton1.setBackground(Color.yellow);
        this.jLabel4.setVisible(true);
        this.jButton1.setVisible(true);


    }

    private int findIndex(String ipAndPort) {
        Iterator<JButton> iterator = buttonList.iterator();
        JButton next = null;
        int index = 0;
        while (iterator.hasNext()) {
            next = iterator.next();
            if (ipAndPort.equals(next.getText())) {
                index = buttonList.indexOf(next);

            }
        }
        return index;
    }

    public void sendingRequest(String ipAndPort) {
        Iterator<JLabel> iterator2 = this.arrowLableList.iterator();
        JLabel next2 = null;
        while (iterator2.hasNext()) {
            next2 = iterator2.next();
            next2.setVisible(false);
        }



        System.out.println("now sending :" + ipAndPort);
        Iterator<JButton> iterator = buttonList.iterator();
        JButton next = null;
        while (iterator.hasNext()) {
            next = iterator.next();
            if (ipAndPort.equals(next.getText())) {
                int index = buttonList.indexOf(next);
                JLabel seletedLable = this.arrowLableList.get(index);
                seletedLable.setVisible(true);
            }
        }

    }
}
