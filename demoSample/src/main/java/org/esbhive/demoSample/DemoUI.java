/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DemoUI.java
 *
 * Created on Aug 27, 2011, 12:26:31 AM
 */
package org.esbhive.demoSample;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import org.esbhive.node.mgt.xsd.ESBNode;

/**
 *
 * @author melaka
 */
public class DemoUI extends javax.swing.JFrame implements UIInterface {

    /** Creates new form DemoUI */
    public DemoUI() {

        initComponents();
        buttonList.add(jButton7);
        buttonList.add(jButton8);
        buttonList.add(jButton9);
        buttonList.add(this.jButton10);
        buttonList.add(this.jButton11);
        buttonList.add(this.jButton12);
        Iterator<JButton> iterator = this.buttonList.iterator();
        while (iterator.hasNext()) {

            iterator.next().setVisible(false);
        }
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setVisible(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        responseArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        nodesArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        responseArea.setColumns(20);
        responseArea.setRows(5);
        jScrollPane1.setViewportView(responseArea);

        jLabel1.setText("Responses");

        nodesArea.setColumns(20);
        nodesArea.setRows(5);
        jScrollPane2.setViewportView(nodesArea);

        jLabel2.setText("Node List");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ESBhive logo icon.png"))); // NOI18N
        jLabel3.setText("jLabel3");

        jButton7.setMaximumSize(new java.awt.Dimension(12, 8));
        jButton7.setBounds(0, 0, 170, 30);
        jLayeredPane1.add(jButton7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jButton8.setBounds(180, 0, 170, 30);
        jLayeredPane1.add(jButton8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jButton9.setBounds(360, 0, 170, 30);
        jLayeredPane1.add(jButton9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jButton10.setBounds(540, 0, 170, 30);
        jLayeredPane1.add(jButton10, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jButton11.setBounds(180, 40, 170, 30);
        jLayeredPane1.add(jButton11, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jButton12.setBounds(360, 40, 170, 30);
        jLayeredPane1.add(jButton12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(97, 97, 97)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1)))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DemoUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea nodesArea;
    private javax.swing.JTextArea responseArea;
    // End of variables declaration//GEN-END:variables
    private CopyOnWriteArrayList<JButton> buttonList = new CopyOnWriteArrayList<JButton>();

    public void nodesFetched(List<ESBNode> esbNodes) {

        Iterator<JButton> iterator = null;
        JButton next;
        String nodes = "";
        JButton[] buttonArry = new JButton[0];
        buttonArry = buttonList.toArray(buttonArry);
        int j = 0;
//        for (ESBNode node : esbNodes) {
//            nodes += node.getIpAndPort() + "\n";
//            iterator = buttonList.iterator();
//            for (int i = j; i < buttonArry.length; i++) {
//                next = buttonArry[i];
//                if (next.getBackground() != Color.red) {
//                  //  next.setBackground(null);
//                    next.setText(node.getIpAndPort());
//                    next.setVisible(true);
//                    break;
//                }        
//            }
//            j++;
//        }



        boolean available = false;
        for (ESBNode node : esbNodes) {
            nodes += node.getIpAndPort() + "\n";
            iterator = buttonList.iterator();
            available = false;
            while (iterator.hasNext() && !available) {
                next = iterator.next();
                if (node.getIpAndPort().equals(next.getText())) {
                    available = true;
                    next.setBackground(null);
                }
                if ("".equals(next.getText())) {
                    next.setText(node.getIpAndPort());
                    next.setVisible(true);
                    next.setBackground(null);
                    available = true;
                }

            }

        }



        iterator = buttonList.iterator();
        JButton next1 = null;
        boolean isAlive = false;
        while (iterator.hasNext()) {
            next1 = iterator.next();
            for (ESBNode node : esbNodes) {
                if (next1.getText().equals(node.getIpAndPort())) {
                    isAlive = true;
                    break;
                } else {
                    isAlive = false;
                }
            }
            if (!isAlive) {
                next1.setBackground(Color.red);
            }
        }


        this.nodesArea.setText(nodes);

    }

    public void requestFailed(ESBNode esbNode) {
        this.responseArea.setText("Failed the request to " + esbNode.getIpAndPort());
    }

    public synchronized void nodeRemoved(List<ESBNode> oldEsbNodes, List<ESBNode> newEsbNodes) {

        List<ESBNode> removed = oldEsbNodes;
        ESBNode next = null;
        JButton next1 = null;
        String old = "";
        String newNodes = "";
        for (ESBNode node1 : oldEsbNodes) {
            old += node1.getHttpsPort() + "\n";
        }

        for (ESBNode node2 : newEsbNodes) {
            newNodes += node2.getIpAndPort() + "\n";
        }
        this.responseArea.setText("Old node list: " + old + "\n" + "New node list: " + newNodes);
        removed.removeAll(newEsbNodes);
        Iterator<ESBNode> iterator = removed.iterator();
        Iterator<JButton> iterator1 = this.buttonList.iterator();
        JButton[] buttonArry = new JButton[0];
        buttonArry = buttonList.toArray(buttonArry);
        int i = 0;

        while (iterator.hasNext()) {
            next = iterator.next();

            while (iterator1.hasNext()) {

                next1 = iterator1.next();
                if (next.getIpAndPort().equals(next1.getText())) {
                    next1.setBackground(Color.orange);
                    // next1.setText("FAILED");

                    // next1.setVisible(false);
                }
                i++;
            }
            i = 0;
        }

    }

    public void responseRecieved(ESBNode node, String value) {

        String ip = node.getIpAndPort();
        JButton next = null;
        Iterator<JButton> iterator = this.buttonList.iterator();
        while (iterator.hasNext()) {

            next = iterator.next();
            if (next.getBackground() != Color.red) {
                next.setBackground(null);
                if (ip.equals(next.getText())) {
                    next.setBackground(Color.GREEN);
                }
            }

        }
        this.responseArea.setText("Response from " + node.getIpAndPort() + " is" + value);

    }

    public List<String> ipPortPairs(List<ESBNode> esbNodes) {
        List ipPortPairs = new ArrayList();
        for (Iterator<ESBNode> i = esbNodes.iterator(); i.hasNext();) {
            ipPortPairs.add(i.next().getIpAndPort());
        }
        return ipPortPairs;
    }

    public void currentLeader(String ipAndPort) {
        System.out.println("he  ");
    }

    public void sendingRequest(String ipAndPort) {
        System.out.println("he  ");
    }
}
